
MotorsteuerungTMC5041v07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d9c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800409c  0800409c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  200001dc  08004280  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004280  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000196e  00000000  00000000  00029dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002099b  00000000  00000000  0002c858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a91  00000000  00000000  0004d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c78ed  00000000  00000000  00054c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ac  00000000  00000000  0011c5ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003f48 	.word	0x08003f48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	08003f48 	.word	0x08003f48

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <sendData>:
char Rx_data[RXLENGTH];  //  creating a buffer of 10 bytes
int dauerlauf1 = 0;
int dauerlauf2 = 0;

void sendData(uint8_t adresse, uint32_t daten)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
	//TMC5130 braucht 40 Bit. Davon sind 8 Bit die Adresse und 32 Bit das Datenpaket

// 8 Bit Bspeispiel Hex 0x01 BIN 0000 0001

	uint8_t _adresse = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	75fb      	strb	r3, [r7, #23]
	uint8_t _paket1 = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	75bb      	strb	r3, [r7, #22]
	uint8_t _paket2 = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	757b      	strb	r3, [r7, #21]
	uint8_t _paket3 = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	753b      	strb	r3, [r7, #20]
	uint8_t _paket4 = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	74fb      	strb	r3, [r7, #19]
	uint8_t paket1, paket2, paket3, paket4;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Chip für die Kommunikation vorbereiten
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	482f      	ldr	r0, [pc, #188]	; (80005e8 <sendData+0xe4>)
 800052a:	f001 f86d 	bl	8001608 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, (uint8_t*) &adresse, 1, 10); // Adresse wird verschicket und der letzte SPI Status wird empfangen
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	230a      	movs	r3, #10
 8000532:	2201      	movs	r2, #1
 8000534:	482d      	ldr	r0, [pc, #180]	; (80005ec <sendData+0xe8>)
 8000536:	f001 fdf9 	bl	800212c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t*) _adresse, 1, 10);
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	4619      	mov	r1, r3
 800053e:	230a      	movs	r3, #10
 8000540:	2201      	movs	r2, #1
 8000542:	482a      	ldr	r0, [pc, #168]	; (80005ec <sendData+0xe8>)
 8000544:	f001 ff26 	bl	8002394 <HAL_SPI_Receive>

	paket1 = ((daten >> 24) & 0xff);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	0e1b      	lsrs	r3, r3, #24
 800054c:	b2db      	uxtb	r3, r3
 800054e:	74bb      	strb	r3, [r7, #18]
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &paket1, 1, 10); // Datenpaket erfolgreich geschreiben mit jeweils 8 Bit SPI.transfer
 8000550:	f107 0112 	add.w	r1, r7, #18
 8000554:	230a      	movs	r3, #10
 8000556:	2201      	movs	r2, #1
 8000558:	4824      	ldr	r0, [pc, #144]	; (80005ec <sendData+0xe8>)
 800055a:	f001 fde7 	bl	800212c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t*) _paket1, 1, 10);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	4619      	mov	r1, r3
 8000562:	230a      	movs	r3, #10
 8000564:	2201      	movs	r2, #1
 8000566:	4821      	ldr	r0, [pc, #132]	; (80005ec <sendData+0xe8>)
 8000568:	f001 ff14 	bl	8002394 <HAL_SPI_Receive>

	paket2 = ((daten >> 16) & 0xff);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	b2db      	uxtb	r3, r3
 8000572:	747b      	strb	r3, [r7, #17]
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &paket2, 1, 10);
 8000574:	f107 0111 	add.w	r1, r7, #17
 8000578:	230a      	movs	r3, #10
 800057a:	2201      	movs	r2, #1
 800057c:	481b      	ldr	r0, [pc, #108]	; (80005ec <sendData+0xe8>)
 800057e:	f001 fdd5 	bl	800212c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t*) _paket2, 1, 10);
 8000582:	7d7b      	ldrb	r3, [r7, #21]
 8000584:	4619      	mov	r1, r3
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	4818      	ldr	r0, [pc, #96]	; (80005ec <sendData+0xe8>)
 800058c:	f001 ff02 	bl	8002394 <HAL_SPI_Receive>

	paket3 = ((daten >> 8) & 0xff);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	743b      	strb	r3, [r7, #16]
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &paket3, 1, 10);
 8000598:	f107 0110 	add.w	r1, r7, #16
 800059c:	230a      	movs	r3, #10
 800059e:	2201      	movs	r2, #1
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <sendData+0xe8>)
 80005a2:	f001 fdc3 	bl	800212c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t*) _paket3, 1, 10);
 80005a6:	7d3b      	ldrb	r3, [r7, #20]
 80005a8:	4619      	mov	r1, r3
 80005aa:	230a      	movs	r3, #10
 80005ac:	2201      	movs	r2, #1
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <sendData+0xe8>)
 80005b0:	f001 fef0 	bl	8002394 <HAL_SPI_Receive>

	paket4 = (daten & 0xff);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &paket4, 1, 10);
 80005ba:	f107 010f 	add.w	r1, r7, #15
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <sendData+0xe8>)
 80005c4:	f001 fdb2 	bl	800212c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t*) _paket4, 1, 10);
 80005c8:	7cfb      	ldrb	r3, [r7, #19]
 80005ca:	4619      	mov	r1, r3
 80005cc:	230a      	movs	r3, #10
 80005ce:	2201      	movs	r2, #1
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <sendData+0xe8>)
 80005d2:	f001 fedf 	bl	8002394 <HAL_SPI_Receive>
	// Chip für die Kommunikation wieder freigeben
	//__HAL_SPI_DISABLE(&hspi2);

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2104      	movs	r1, #4
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <sendData+0xe4>)
 80005dc:	f001 f814 	bl	8001608 <HAL_GPIO_WritePin>
	return 0;
 80005e0:	bf00      	nop
}
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400
 80005ec:	2000020c 	.word	0x2000020c

080005f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a5c      	ldr	r2, [pc, #368]	; (8000770 <HAL_UART_RxCpltCallback+0x180>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	f040 80b1 	bne.w	8000766 <HAL_UART_RxCpltCallback+0x176>
	{
		int pos;
		//char text[RXLENGTH];
		//strcpy(text, Rx_data);
		pos = strcspn(Rx_data, "w");
 8000604:	495b      	ldr	r1, [pc, #364]	; (8000774 <HAL_UART_RxCpltCallback+0x184>)
 8000606:	485c      	ldr	r0, [pc, #368]	; (8000778 <HAL_UART_RxCpltCallback+0x188>)
 8000608:	f003 fb0e 	bl	8003c28 <strcspn>
 800060c:	4603      	mov	r3, r0
 800060e:	617b      	str	r3, [r7, #20]
		char *cmd;
		char *ptr1;
		char *ptr2;
		cmd = strtok(Rx_data, "w");
 8000610:	4958      	ldr	r1, [pc, #352]	; (8000774 <HAL_UART_RxCpltCallback+0x184>)
 8000612:	4859      	ldr	r0, [pc, #356]	; (8000778 <HAL_UART_RxCpltCallback+0x188>)
 8000614:	f003 fb1a 	bl	8003c4c <strtok>
 8000618:	4603      	mov	r3, r0
 800061a:	613b      	str	r3, [r7, #16]

		ptr1 = strtok(NULL, "w");
 800061c:	4955      	ldr	r1, [pc, #340]	; (8000774 <HAL_UART_RxCpltCallback+0x184>)
 800061e:	2000      	movs	r0, #0
 8000620:	f003 fb14 	bl	8003c4c <strtok>
 8000624:	4603      	mov	r3, r0
 8000626:	60fb      	str	r3, [r7, #12]
		ptr2 = strtok(NULL, "w");
 8000628:	4952      	ldr	r1, [pc, #328]	; (8000774 <HAL_UART_RxCpltCallback+0x184>)
 800062a:	2000      	movs	r0, #0
 800062c:	f003 fb0e 	bl	8003c4c <strtok>
 8000630:	4603      	mov	r3, r0
 8000632:	60bb      	str	r3, [r7, #8]
		//Programm-> 4 Stop

		//Beispiel-> 1w2w10w
		//Motor 1 soll 10 Umdrehungen machen

		if (atoi(cmd) == 1)
 8000634:	6938      	ldr	r0, [r7, #16]
 8000636:	f003 fac1 	bl	8003bbc <atoi>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d143      	bne.n	80006c8 <HAL_UART_RxCpltCallback+0xd8>
		{		   // Motor 1
			switch (atoi(ptr1))
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f003 fabb 	bl	8003bbc <atoi>
 8000646:	4603      	mov	r3, r0
 8000648:	3b01      	subs	r3, #1
 800064a:	2b03      	cmp	r3, #3
 800064c:	d83c      	bhi.n	80006c8 <HAL_UART_RxCpltCallback+0xd8>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <HAL_UART_RxCpltCallback+0x64>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000665 	.word	0x08000665
 8000658:	08000677 	.word	0x08000677
 800065c:	0800069f 	.word	0x0800069f
 8000660:	080006b1 	.word	0x080006b1
			{
			case 1:		   // Beschleunigung
				sendData(0xA4, (uint8_t*) atoi(ptr2));		   //A1=1000
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f003 faa9 	bl	8003bbc <atoi>
 800066a:	4603      	mov	r3, r0
 800066c:	4619      	mov	r1, r3
 800066e:	20a4      	movs	r0, #164	; 0xa4
 8000670:	f7ff ff48 	bl	8000504 <sendData>
				break;
 8000674:	e028      	b.n	80006c8 <HAL_UART_RxCpltCallback+0xd8>
			case 2:		   //Umdrehungen
				// 200 Ganzschritte mal 256 Microschritte = 51200 Schritte pro Umdrehung
				// Fahre x Umdrehungen für Motor 1
				sendData(0xA1, 0x00000000);	// Motor 1 XACTUAL Rücksetzen der Position damit die Umdrehungen stimmen
 8000676:	2100      	movs	r1, #0
 8000678:	20a1      	movs	r0, #161	; 0xa1
 800067a:	f7ff ff43 	bl	8000504 <sendData>
				sendData(0xAD, (uint32_t*) (atoi(ptr2) * 51200));
 800067e:	68b8      	ldr	r0, [r7, #8]
 8000680:	f003 fa9c 	bl	8003bbc <atoi>
 8000684:	4602      	mov	r2, r0
 8000686:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800068a:	fb03 f302 	mul.w	r3, r3, r2
 800068e:	4619      	mov	r1, r3
 8000690:	20ad      	movs	r0, #173	; 0xad
 8000692:	f7ff ff37 	bl	8000504 <sendData>
				dauerlauf1 = 0;
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <HAL_UART_RxCpltCallback+0x18c>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
				break;
 800069c:	e014      	b.n	80006c8 <HAL_UART_RxCpltCallback+0xd8>
			case 3:	//Dauerlauf
				dauerlauf1 = 1;
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <HAL_UART_RxCpltCallback+0x18c>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
				sendData(0xAD, 0x00100000);
 80006a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80006a8:	20ad      	movs	r0, #173	; 0xad
 80006aa:	f7ff ff2b 	bl	8000504 <sendData>
				break;
 80006ae:	e00b      	b.n	80006c8 <HAL_UART_RxCpltCallback+0xd8>
			case 4:	//stop
				sendData(0xA1, 0x00000000);	// Motor 1 XACTUAL
 80006b0:	2100      	movs	r1, #0
 80006b2:	20a1      	movs	r0, #161	; 0xa1
 80006b4:	f7ff ff26 	bl	8000504 <sendData>
				sendData(0xAD, 0x00000000); // Motor 1 XTARGET
 80006b8:	2100      	movs	r1, #0
 80006ba:	20ad      	movs	r0, #173	; 0xad
 80006bc:	f7ff ff22 	bl	8000504 <sendData>
				dauerlauf1 = 0;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <HAL_UART_RxCpltCallback+0x18c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
				break;
 80006c6:	bf00      	nop
			}
		}
		if (atoi(cmd) == 2)
 80006c8:	6938      	ldr	r0, [r7, #16]
 80006ca:	f003 fa77 	bl	8003bbc <atoi>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d143      	bne.n	800075c <HAL_UART_RxCpltCallback+0x16c>
		{ //Motor 2
			switch (atoi(ptr1))
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f003 fa71 	bl	8003bbc <atoi>
 80006da:	4603      	mov	r3, r0
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d83c      	bhi.n	800075c <HAL_UART_RxCpltCallback+0x16c>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <HAL_UART_RxCpltCallback+0xf8>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	0800070b 	.word	0x0800070b
 80006f0:	08000733 	.word	0x08000733
 80006f4:	08000745 	.word	0x08000745
			{
			case 1:		   // Beschleunigung
				sendData(0xC4, (uint8_t*) atoi(ptr2));		   //A1=1000
 80006f8:	68b8      	ldr	r0, [r7, #8]
 80006fa:	f003 fa5f 	bl	8003bbc <atoi>
 80006fe:	4603      	mov	r3, r0
 8000700:	4619      	mov	r1, r3
 8000702:	20c4      	movs	r0, #196	; 0xc4
 8000704:	f7ff fefe 	bl	8000504 <sendData>
				break;
 8000708:	e028      	b.n	800075c <HAL_UART_RxCpltCallback+0x16c>
			case 2:		   //Umdrehungen
				// 200 Ganzschritte mal 256 Microschritte = 51200 Schritte pro Umdrehung
				// Fahre x Umdrehungen für Motor 2
				sendData(0xC1, 0x00000000);	// Motor 2 XACTUAL Rücksetzen der Position damit die Umdrehungen stimmen
 800070a:	2100      	movs	r1, #0
 800070c:	20c1      	movs	r0, #193	; 0xc1
 800070e:	f7ff fef9 	bl	8000504 <sendData>
				sendData(0xCD, (uint32_t*) (atoi(ptr2) * 51200));
 8000712:	68b8      	ldr	r0, [r7, #8]
 8000714:	f003 fa52 	bl	8003bbc <atoi>
 8000718:	4602      	mov	r2, r0
 800071a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800071e:	fb03 f302 	mul.w	r3, r3, r2
 8000722:	4619      	mov	r1, r3
 8000724:	20cd      	movs	r0, #205	; 0xcd
 8000726:	f7ff feed 	bl	8000504 <sendData>
				dauerlauf2 = 0;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_UART_RxCpltCallback+0x190>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				break;
 8000730:	e014      	b.n	800075c <HAL_UART_RxCpltCallback+0x16c>
			case 3:	//Dauerlauf
				dauerlauf2 = 1;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <HAL_UART_RxCpltCallback+0x190>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
				sendData(0xCD, 0x00100000);
 8000738:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800073c:	20cd      	movs	r0, #205	; 0xcd
 800073e:	f7ff fee1 	bl	8000504 <sendData>
				break;
 8000742:	e00b      	b.n	800075c <HAL_UART_RxCpltCallback+0x16c>
			case 4:	//stop
				sendData(0xC1, 0x00000000);	// Motor 1 XACTUAL
 8000744:	2100      	movs	r1, #0
 8000746:	20c1      	movs	r0, #193	; 0xc1
 8000748:	f7ff fedc 	bl	8000504 <sendData>
				sendData(0xCD, 0x00000000); // Motor 1 XTARGET
 800074c:	2100      	movs	r1, #0
 800074e:	20cd      	movs	r0, #205	; 0xcd
 8000750:	f7ff fed8 	bl	8000504 <sendData>
				dauerlauf2 = 0;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_UART_RxCpltCallback+0x190>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
				break;
 800075a:	bf00      	nop
			}
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*) Rx_data, RXLENGTH);
 800075c:	2209      	movs	r2, #9
 800075e:	4906      	ldr	r1, [pc, #24]	; (8000778 <HAL_UART_RxCpltCallback+0x188>)
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <HAL_UART_RxCpltCallback+0x194>)
 8000762:	f002 fbd9 	bl	8002f18 <HAL_UART_Receive_IT>
	}
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40004400 	.word	0x40004400
 8000774:	08003f60 	.word	0x08003f60
 8000778:	20000264 	.word	0x20000264
 800077c:	200001f8 	.word	0x200001f8
 8000780:	200001fc 	.word	0x200001fc
 8000784:	20000274 	.word	0x20000274

08000788 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800078c:	f000 fbe2 	bl	8000f54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000790:	f000 f8d6 	bl	8000940 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000794:	f000 f9a2 	bl	8000adc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000798:	f000 f976 	bl	8000a88 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800079c:	f000 f93e 	bl	8000a1c <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) Rx_data, RXLENGTH);
 80007a0:	2209      	movs	r2, #9
 80007a2:	495d      	ldr	r1, [pc, #372]	; (8000918 <main+0x190>)
 80007a4:	485d      	ldr	r0, [pc, #372]	; (800091c <main+0x194>)
 80007a6:	f002 fbb7 	bl	8002f18 <HAL_UART_Receive_IT>

	__HAL_SPI_ENABLE(&hspi2);
 80007aa:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <main+0x198>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b5b      	ldr	r3, [pc, #364]	; (8000920 <main+0x198>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007b8:	601a      	str	r2, [r3, #0]
	sendData(0x00, 0x00000000); //GCONF Read
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fea1 	bl	8000504 <sendData>

	sendData(0x80, 0x00000000); //GCONF
 80007c2:	2100      	movs	r1, #0
 80007c4:	2080      	movs	r0, #128	; 0x80
 80007c6:	f7ff fe9d 	bl	8000504 <sendData>

	sendData(0xA0, 0x00000000); // Motor 1 RAMPMODE=0
 80007ca:	2100      	movs	r1, #0
 80007cc:	20a0      	movs	r0, #160	; 0xa0
 80007ce:	f7ff fe99 	bl	8000504 <sendData>

	sendData(0xC0, 0x00000000); // Motor 2 RAMPMODE=0
 80007d2:	2100      	movs	r1, #0
 80007d4:	20c0      	movs	r0, #192	; 0xc0
 80007d6:	f7ff fe95 	bl	8000504 <sendData>

	// Motor 1
	sendData(0xA3, 0x0000010F); // VSTART = 15
 80007da:	f240 110f 	movw	r1, #271	; 0x10f
 80007de:	20a3      	movs	r0, #163	; 0xa3
 80007e0:	f7ff fe90 	bl	8000504 <sendData>

	sendData(0xA4, 0x000003E8); //A1=1000
 80007e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007e8:	20a4      	movs	r0, #164	; 0xa4
 80007ea:	f7ff fe8b 	bl	8000504 <sendData>

	sendData(0xA5, 0x000186A0); //V1=100000
 80007ee:	494d      	ldr	r1, [pc, #308]	; (8000924 <main+0x19c>)
 80007f0:	20a5      	movs	r0, #165	; 0xa5
 80007f2:	f7ff fe87 	bl	8000504 <sendData>

	sendData(0xA6, 0x00000200); //AMAX=50000
 80007f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fa:	20a6      	movs	r0, #166	; 0xa6
 80007fc:	f7ff fe82 	bl	8000504 <sendData>

	sendData(0xA7, 0x00DFFFFF); // //VMAX=100000 Geschwindigkeit auf MAX
 8000800:	4949      	ldr	r1, [pc, #292]	; (8000928 <main+0x1a0>)
 8000802:	20a7      	movs	r0, #167	; 0xa7
 8000804:	f7ff fe7e 	bl	8000504 <sendData>

	sendData(0xA8, 0x0000F550); //DMAX
 8000808:	f24f 5150 	movw	r1, #62800	; 0xf550
 800080c:	20a8      	movs	r0, #168	; 0xa8
 800080e:	f7ff fe79 	bl	8000504 <sendData>

	sendData(0xAA, 0x0000F578); //D1=1400
 8000812:	f24f 5178 	movw	r1, #62840	; 0xf578
 8000816:	20aa      	movs	r0, #170	; 0xaa
 8000818:	f7ff fe74 	bl	8000504 <sendData>

	sendData(0xAB, 0x00000020); //VSTOP=32
 800081c:	2120      	movs	r1, #32
 800081e:	20ab      	movs	r0, #171	; 0xab
 8000820:	f7ff fe70 	bl	8000504 <sendData>

	sendData(0xAC, 0x0000000A); //TPOWERDOWN=10
 8000824:	210a      	movs	r1, #10
 8000826:	20ac      	movs	r0, #172	; 0xac
 8000828:	f7ff fe6c 	bl	8000504 <sendData>

	// Motor 2
	sendData(0xC3, 0x0000000F); // VSTART = 15
 800082c:	210f      	movs	r1, #15
 800082e:	20c3      	movs	r0, #195	; 0xc3
 8000830:	f7ff fe68 	bl	8000504 <sendData>

	sendData(0xC4, 0x00000108); //A1=1000
 8000834:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000838:	20c4      	movs	r0, #196	; 0xc4
 800083a:	f7ff fe63 	bl	8000504 <sendData>

	sendData(0xC5, 0x000056A0); //V1=100000
 800083e:	f245 61a0 	movw	r1, #22176	; 0x56a0
 8000842:	20c5      	movs	r0, #197	; 0xc5
 8000844:	f7ff fe5e 	bl	8000504 <sendData>

	sendData(0xC6, 0x0000C350); //AMAX=50000
 8000848:	f24c 3150 	movw	r1, #50000	; 0xc350
 800084c:	20c6      	movs	r0, #198	; 0xc6
 800084e:	f7ff fe59 	bl	8000504 <sendData>

	sendData(0xC7, 0x000086A0); //VMAX=100000
 8000852:	f248 61a0 	movw	r1, #34464	; 0x86a0
 8000856:	20c7      	movs	r0, #199	; 0xc7
 8000858:	f7ff fe54 	bl	8000504 <sendData>

	sendData(0xC8, 0x000002BC); //DMAX
 800085c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000860:	20c8      	movs	r0, #200	; 0xc8
 8000862:	f7ff fe4f 	bl	8000504 <sendData>

	sendData(0xCA, 0x00000578); //D1=1400
 8000866:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800086a:	20ca      	movs	r0, #202	; 0xca
 800086c:	f7ff fe4a 	bl	8000504 <sendData>

	sendData(0xCB, 0x00000020); //VSTOP=32
 8000870:	2120      	movs	r1, #32
 8000872:	20cb      	movs	r0, #203	; 0xcb
 8000874:	f7ff fe46 	bl	8000504 <sendData>

	sendData(0xCC, 0x0000000A); //TPOWERDOWN=10
 8000878:	210a      	movs	r1, #10
 800087a:	20cc      	movs	r0, #204	; 0xcc
 800087c:	f7ff fe42 	bl	8000504 <sendData>

	//IHOLD Config                                            delay  irun   ihold
	// unsigned long iholdconfig = 0b 0000 0000 0000 0000 00   0011  11110  00000;
	sendData(0xB0, 0b00000000000000000000111111000011);  	// Motor 1
 8000880:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8000884:	20b0      	movs	r0, #176	; 0xb0
 8000886:	f7ff fe3d 	bl	8000504 <sendData>

	sendData(0xD0, 0b00000000000000000000111111000011);  	// Motor 2
 800088a:	f640 71c3 	movw	r1, #4035	; 0xfc3
 800088e:	20d0      	movs	r0, #208	; 0xd0
 8000890:	f7ff fe38 	bl	8000504 <sendData>

	//CHOPPER Config
	//sendData(0xEC,0x000101D5);      //CHOPCONF: TOFF=5, HSTRT=5, HEND=3, TBL=2, CHM=0 (spreadcycle)
	sendData(0xEC, 0b00000000000000001000000000000010);  	// Motor 1
 8000894:	f248 0102 	movw	r1, #32770	; 0x8002
 8000898:	20ec      	movs	r0, #236	; 0xec
 800089a:	f7ff fe33 	bl	8000504 <sendData>

	sendData(0xFC, 0b00000000000000001000000000000010);  	// Motor 2
 800089e:	f248 0102 	movw	r1, #32770	; 0x8002
 80008a2:	20fc      	movs	r0, #252	; 0xfc
 80008a4:	f7ff fe2e 	bl	8000504 <sendData>

	// PWM Config                                freewheel    autoscale   pwm_freq    pwm_grad   pwm_amplitude
	//unsigned long pwmconfig = 0b 0000 0000  00     01    0      1          01       11111111   11111111;
	sendData(0x90, 0b00000000001001011111111111111111);  	// PWMCONF Motor 1
 80008a8:	4920      	ldr	r1, [pc, #128]	; (800092c <main+0x1a4>)
 80008aa:	2090      	movs	r0, #144	; 0x90
 80008ac:	f7ff fe2a 	bl	8000504 <sendData>

	sendData(0x98, 0b00000000001001011111111111111111);  	// PWMCONF Motor 2
 80008b0:	491e      	ldr	r1, [pc, #120]	; (800092c <main+0x1a4>)
 80008b2:	2098      	movs	r0, #152	; 0x98
 80008b4:	f7ff fe26 	bl	8000504 <sendData>

	sendData(0xA1, 0x00000000);  	// Motor 1 XACTUAL
 80008b8:	2100      	movs	r1, #0
 80008ba:	20a1      	movs	r0, #161	; 0xa1
 80008bc:	f7ff fe22 	bl	8000504 <sendData>

	sendData(0xAD, 0x00000000); // Motor 1 XTARGET
 80008c0:	2100      	movs	r1, #0
 80008c2:	20ad      	movs	r0, #173	; 0xad
 80008c4:	f7ff fe1e 	bl	8000504 <sendData>

	sendData(0xC1, 0x00000000); // Motor 2 XACTUAL
 80008c8:	2100      	movs	r1, #0
 80008ca:	20c1      	movs	r0, #193	; 0xc1
 80008cc:	f7ff fe1a 	bl	8000504 <sendData>

	sendData(0xCD, 0x00000000); // Motor 2 XTARGET
 80008d0:	2100      	movs	r1, #0
 80008d2:	20cd      	movs	r0, #205	; 0xcd
 80008d4:	f7ff fe16 	bl	8000504 <sendData>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		bufftr = "Hello!\n\r";
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <main+0x1a8>)
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <main+0x1ac>)
 80008dc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) bufftr, 8, 1);
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <main+0x1a8>)
 80008e0:	6819      	ldr	r1, [r3, #0]
 80008e2:	2301      	movs	r3, #1
 80008e4:	2208      	movs	r2, #8
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <main+0x194>)
 80008e8:	f002 fa7d 	bl	8002de6 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f0:	f000 fba2 	bl	8001038 <HAL_Delay>
		if (dauerlauf1 == 1)
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <main+0x1b0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d103      	bne.n	8000904 <main+0x17c>
		{
			sendData(0xA1, 0x00000000);	// Motor 1 XACTUAL
 80008fc:	2100      	movs	r1, #0
 80008fe:	20a1      	movs	r0, #161	; 0xa1
 8000900:	f7ff fe00 	bl	8000504 <sendData>
		}
		if (dauerlauf2 == 1)
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0x1b4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d1e5      	bne.n	80008d8 <main+0x150>
		{
			sendData(0xC1, 0x00000000);	// Motor 1 XACTUAL
 800090c:	2100      	movs	r1, #0
 800090e:	20c1      	movs	r0, #193	; 0xc1
 8000910:	f7ff fdf8 	bl	8000504 <sendData>
		bufftr = "Hello!\n\r";
 8000914:	e7e0      	b.n	80008d8 <main+0x150>
 8000916:	bf00      	nop
 8000918:	20000264 	.word	0x20000264
 800091c:	20000274 	.word	0x20000274
 8000920:	2000020c 	.word	0x2000020c
 8000924:	000186a0 	.word	0x000186a0
 8000928:	00dfffff 	.word	0x00dfffff
 800092c:	0025ffff 	.word	0x0025ffff
 8000930:	20000270 	.word	0x20000270
 8000934:	08003f64 	.word	0x08003f64
 8000938:	200001f8 	.word	0x200001f8
 800093c:	200001fc 	.word	0x200001fc

08000940 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f003 f962 	bl	8003c18 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <SystemClock_Config+0xd4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a29      	ldr	r2, [pc, #164]	; (8000a14 <SystemClock_Config+0xd4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <SystemClock_Config+0xd4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <SystemClock_Config+0xd8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <SystemClock_Config+0xd8>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <SystemClock_Config+0xd8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f8ee 	bl	8001bb0 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80009da:	f000 f903 	bl	8000be4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fe1e 	bl	800163c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000a06:	f000 f8ed 	bl	8000be4 <Error_Handler>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <MX_SPI2_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a2c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a50:	2218      	movs	r2, #24
 8000a52:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI2_Init+0x64>)
 8000a6e:	f001 faf9 	bl	8002064 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8000a78:	f000 f8b4 	bl	8000be4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000020c 	.word	0x2000020c
 8000a84:	40003800 	.word	0x40003800

08000a88 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART2_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f002 f944 	bl	8002d4c <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000aca:	f000 f88b 	bl	8000be4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000274 	.word	0x20000274
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a35      	ldr	r2, [pc, #212]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0xf8>)
 8000b68:	f000 fd4e 	bl	8001608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <MX_GPIO_Init+0xfc>)
 8000b72:	f000 fd49 	bl	8001608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x100>)
 8000b7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x104>)
 8000b8c:	f000 fbaa 	bl	80012e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b90:	2320      	movs	r3, #32
 8000b92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <MX_GPIO_Init+0xf8>)
 8000ba8:	f000 fb9c 	bl	80012e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 8000bac:	2304      	movs	r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0xfc>)
 8000bc4:	f000 fb8e 	bl	80012e4 <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	10210000 	.word	0x10210000
 8000be0:	40020800 	.word	0x40020800

08000be4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 faf2 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <HAL_SPI_MspInit+0xf0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d162      	bne.n	8000d2c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a32      	ldr	r2, [pc, #200]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a2b      	ldr	r2, [pc, #172]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <HAL_SPI_MspInit+0xf4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4819      	ldr	r0, [pc, #100]	; (8000d3c <HAL_SPI_MspInit+0xf8>)
 8000cd6:	f000 fb05 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0xf8>)
 8000cf6:	f000 faf5 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <HAL_SPI_MspInit+0xfc>)
 8000d18:	f000 fae4 	bl	80012e4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2024      	movs	r0, #36	; 0x24
 8000d22:	f000 fa86 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d26:	2024      	movs	r0, #36	; 0x24
 8000d28:	f000 fa9f 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40003800 	.word	0x40003800
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0x94>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d133      	bne.n	8000dce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000dba:	f000 fa93 	bl	80012e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2026      	movs	r0, #38	; 0x26
 8000dc4:	f000 fa35 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 fa4e 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f8de 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <SPI2_IRQHandler+0x10>)
 8000e46:	f001 fd51 	bl	80028ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000020c 	.word	0x2000020c

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	f002 f8b3 	bl	8002fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000274 	.word	0x20000274

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f002 fe94 	bl	8003bc4 <__errno>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	20000200 	.word	0x20000200
 8000ed0:	200002c0 	.word	0x200002c0

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SystemInit+0x28>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <SystemInit+0x28>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SystemInit+0x28>)
 8000eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eee:	609a      	str	r2, [r3, #8]
#endif
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f06:	e003      	b.n	8000f10 <LoopCopyDataInit>

08000f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0e:	3104      	adds	r1, #4

08000f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f18:	d3f6      	bcc.n	8000f08 <CopyDataInit>
  ldr  r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f1c:	e002      	b.n	8000f24 <LoopFillZerobss>

08000f1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f20:	f842 3b04 	str.w	r3, [r2], #4

08000f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f28:	d3f9      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd3 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 fe4f 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fc29 	bl	8000788 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f3c:	080040a4 	.word	0x080040a4
  ldr  r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f44:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000f48:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000f4c:	200002bc 	.word	0x200002bc

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94d 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fe34 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f965 	bl	8001286 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f92d 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200002b4 	.word	0x200002b4

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002b4 	.word	0x200002b4

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_Delay+0x40>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d004      	beq.n	80012bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e00c      	b.n	80012d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2205      	movs	r2, #5
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e165      	b.n	80015cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8154 	bne.w	80015c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d00b      	beq.n	800133e <HAL_GPIO_Init+0x5a>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001332:	2b11      	cmp	r3, #17
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b12      	cmp	r3, #18
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0xfc>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b12      	cmp	r3, #18
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80ae 	beq.w	80015c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <HAL_GPIO_Init+0x304>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	; (80015ec <HAL_GPIO_Init+0x308>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_GPIO_Init+0x30c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4b      	ldr	r2, [pc, #300]	; (80015f4 <HAL_GPIO_Init+0x310>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <HAL_GPIO_Init+0x314>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x20a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a49      	ldr	r2, [pc, #292]	; (80015fc <HAL_GPIO_Init+0x318>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x206>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_GPIO_Init+0x31c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x202>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e00c      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014ea:	2305      	movs	r3, #5
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x21c>
 80014fe:	2300      	movs	r3, #0
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4934      	ldr	r1, [pc, #208]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001542:	4a30      	ldr	r2, [pc, #192]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_GPIO_Init+0x320>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_GPIO_Init+0x320>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_GPIO_Init+0x320>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_GPIO_Init+0x320>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	f67f ae96 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d4:	bf00      	nop
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0cc      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d90c      	bls.n	8001678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a52      	ldr	r2, [pc, #328]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d044      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e067      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4934      	ldr	r1, [pc, #208]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff fc78 	bl	8001020 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff fc74 	bl	8001020 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e04f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d20c      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f855 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 80017c6:	4601      	mov	r1, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	fa21 f303 	lsr.w	r3, r1, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fbd8 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08003f70 	.word	0x08003f70
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_GetHCLKFreq+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001824:	f7ff fff0 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0a9b      	lsrs	r3, r3, #10
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	08003f80 	.word	0x08003f80

08001848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800184c:	f7ff ffdc 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001850:	4601      	mov	r1, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0b5b      	lsrs	r3, r3, #13
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_RCC_GetPCLK2Freq+0x24>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	08003f80 	.word	0x08003f80

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188a:	4bc6      	ldr	r3, [pc, #792]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b0c      	cmp	r3, #12
 8001894:	f200 817e 	bhi.w	8001b94 <HAL_RCC_GetSysClockFreq+0x324>
 8001898:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018d5 	.word	0x080018d5
 80018a4:	08001b95 	.word	0x08001b95
 80018a8:	08001b95 	.word	0x08001b95
 80018ac:	08001b95 	.word	0x08001b95
 80018b0:	080018db 	.word	0x080018db
 80018b4:	08001b95 	.word	0x08001b95
 80018b8:	08001b95 	.word	0x08001b95
 80018bc:	08001b95 	.word	0x08001b95
 80018c0:	080018e1 	.word	0x080018e1
 80018c4:	08001b95 	.word	0x08001b95
 80018c8:	08001b95 	.word	0x08001b95
 80018cc:	08001b95 	.word	0x08001b95
 80018d0:	08001a3d 	.word	0x08001a3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4bb4      	ldr	r3, [pc, #720]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x338>)
 80018d6:	613b      	str	r3, [r7, #16]
       break;
 80018d8:	e15f      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4bb4      	ldr	r3, [pc, #720]	; (8001bac <HAL_RCC_GetSysClockFreq+0x33c>)
 80018dc:	613b      	str	r3, [r7, #16]
      break;
 80018de:	e15c      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4bb0      	ldr	r3, [pc, #704]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4bae      	ldr	r3, [pc, #696]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d04a      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4bab      	ldr	r3, [pc, #684]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	f04f 0400 	mov.w	r4, #0
 8001900:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	ea03 0501 	and.w	r5, r3, r1
 800190c:	ea04 0602 	and.w	r6, r4, r2
 8001910:	4629      	mov	r1, r5
 8001912:	4632      	mov	r2, r6
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	f04f 0400 	mov.w	r4, #0
 800191c:	0154      	lsls	r4, r2, #5
 800191e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001922:	014b      	lsls	r3, r1, #5
 8001924:	4619      	mov	r1, r3
 8001926:	4622      	mov	r2, r4
 8001928:	1b49      	subs	r1, r1, r5
 800192a:	eb62 0206 	sbc.w	r2, r2, r6
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	0194      	lsls	r4, r2, #6
 8001938:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800193c:	018b      	lsls	r3, r1, #6
 800193e:	1a5b      	subs	r3, r3, r1
 8001940:	eb64 0402 	sbc.w	r4, r4, r2
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	00e2      	lsls	r2, r4, #3
 800194e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001952:	00d9      	lsls	r1, r3, #3
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	195b      	adds	r3, r3, r5
 800195a:	eb44 0406 	adc.w	r4, r4, r6
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	0262      	lsls	r2, r4, #9
 8001968:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800196c:	0259      	lsls	r1, r3, #9
 800196e:	460b      	mov	r3, r1
 8001970:	4614      	mov	r4, r2
 8001972:	4618      	mov	r0, r3
 8001974:	4621      	mov	r1, r4
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	f7fe fc40 	bl	8000204 <__aeabi_uldivmod>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e049      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	4b85      	ldr	r3, [pc, #532]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	f240 11ff 	movw	r1, #511	; 0x1ff
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	ea03 0501 	and.w	r5, r3, r1
 80019a2:	ea04 0602 	and.w	r6, r4, r2
 80019a6:	4629      	mov	r1, r5
 80019a8:	4632      	mov	r2, r6
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f04f 0400 	mov.w	r4, #0
 80019b2:	0154      	lsls	r4, r2, #5
 80019b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b8:	014b      	lsls	r3, r1, #5
 80019ba:	4619      	mov	r1, r3
 80019bc:	4622      	mov	r2, r4
 80019be:	1b49      	subs	r1, r1, r5
 80019c0:	eb62 0206 	sbc.w	r2, r2, r6
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0194      	lsls	r4, r2, #6
 80019ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	1a5b      	subs	r3, r3, r1
 80019d6:	eb64 0402 	sbc.w	r4, r4, r2
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	00e2      	lsls	r2, r4, #3
 80019e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019e8:	00d9      	lsls	r1, r3, #3
 80019ea:	460b      	mov	r3, r1
 80019ec:	4614      	mov	r4, r2
 80019ee:	195b      	adds	r3, r3, r5
 80019f0:	eb44 0406 	adc.w	r4, r4, r6
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	02a2      	lsls	r2, r4, #10
 80019fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a02:	0299      	lsls	r1, r3, #10
 8001a04:	460b      	mov	r3, r1
 8001a06:	4614      	mov	r4, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	f7fe fbf5 	bl	8000204 <__aeabi_uldivmod>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e0ae      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a44:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04a      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	ea03 0501 	and.w	r5, r3, r1
 8001a68:	ea04 0602 	and.w	r6, r4, r2
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	4632      	mov	r2, r6
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	f04f 0400 	mov.w	r4, #0
 8001a78:	0154      	lsls	r4, r2, #5
 8001a7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a7e:	014b      	lsls	r3, r1, #5
 8001a80:	4619      	mov	r1, r3
 8001a82:	4622      	mov	r2, r4
 8001a84:	1b49      	subs	r1, r1, r5
 8001a86:	eb62 0206 	sbc.w	r2, r2, r6
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	0194      	lsls	r4, r2, #6
 8001a94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a98:	018b      	lsls	r3, r1, #6
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	eb64 0402 	sbc.w	r4, r4, r2
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	00e2      	lsls	r2, r4, #3
 8001aaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001aae:	00d9      	lsls	r1, r3, #3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	195b      	adds	r3, r3, r5
 8001ab6:	eb44 0406 	adc.w	r4, r4, r6
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	0262      	lsls	r2, r4, #9
 8001ac4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ac8:	0259      	lsls	r1, r3, #9
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f04f 0400 	mov.w	r4, #0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	f7fe fb92 	bl	8000204 <__aeabi_uldivmod>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e049      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	ea03 0501 	and.w	r5, r3, r1
 8001afe:	ea04 0602 	and.w	r6, r4, r2
 8001b02:	4629      	mov	r1, r5
 8001b04:	4632      	mov	r2, r6
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	f04f 0400 	mov.w	r4, #0
 8001b0e:	0154      	lsls	r4, r2, #5
 8001b10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b14:	014b      	lsls	r3, r1, #5
 8001b16:	4619      	mov	r1, r3
 8001b18:	4622      	mov	r2, r4
 8001b1a:	1b49      	subs	r1, r1, r5
 8001b1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	f04f 0400 	mov.w	r4, #0
 8001b28:	0194      	lsls	r4, r2, #6
 8001b2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b2e:	018b      	lsls	r3, r1, #6
 8001b30:	1a5b      	subs	r3, r3, r1
 8001b32:	eb64 0402 	sbc.w	r4, r4, r2
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b44:	00d9      	lsls	r1, r3, #3
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	195b      	adds	r3, r3, r5
 8001b4c:	eb44 0406 	adc.w	r4, r4, r6
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	02a2      	lsls	r2, r4, #10
 8001b5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b5e:	0299      	lsls	r1, r3, #10
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	4621      	mov	r1, r4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f04f 0400 	mov.w	r4, #0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4623      	mov	r3, r4
 8001b72:	f7fe fb47 	bl	8000204 <__aeabi_uldivmod>
 8001b76:	4603      	mov	r3, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0f1b      	lsrs	r3, r3, #28
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	613b      	str	r3, [r7, #16]
      break;
 8001b92:	e002      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b96:	613b      	str	r3, [r7, #16]
      break;
 8001b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9a:	693b      	ldr	r3, [r7, #16]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8083 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bca:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d019      	beq.n	8001c0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001be2:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bee:	d00c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf0:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d112      	bne.n	8001c22 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c08:	d10b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d05b      	beq.n	8001cce <HAL_RCC_OscConfig+0x11e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d157      	bne.n	8001cce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e216      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x8a>
 8001c2c:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e01d      	b.n	8001c76 <HAL_RCC_OscConfig+0xc6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0xae>
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0xc6>
 8001c5e:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6f      	ldr	r2, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6c      	ldr	r2, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d013      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f9cf 	bl	8001020 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c86:	f7ff f9cb 	bl	8001020 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1db      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0xd6>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f9bb 	bl	8001020 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cae:	f7ff f9b7 	bl	8001020 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	; 0x64
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e1c7      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc0:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0xfe>
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d06f      	beq.n	8001dbc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cdc:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d017      	beq.n	8001d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d00:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d11c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0c:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d116      	bne.n	8001d46 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x180>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e18f      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4938      	ldr	r1, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d44:	e03a      	b.n	8001dbc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d020      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f964 	bl	8001020 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f960 	bl	8001020 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e170      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4925      	ldr	r1, [pc, #148]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x274>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7ff f943 	bl	8001020 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f93f 	bl	8001020 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e14f      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d037      	beq.n	8001e38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d016      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x278>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f923 	bl	8001020 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff f91f 	bl	8001020 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e12f      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_OscConfig+0x270>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x22e>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x278>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f90c 	bl	8001020 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f908 	bl	8001020 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e118      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	42470000 	.word	0x42470000
 8001e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8097 	beq.w	8001f74 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f8c7 	bl	8001020 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff f8c3 	bl	8001020 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0d3      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x31a>
 8001ebc:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x354>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x33c>
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x354>
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a59      	ldr	r2, [pc, #356]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f888 	bl	8001020 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff f884 	bl	8001020 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e092      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ee      	beq.n	8001f14 <HAL_RCC_OscConfig+0x364>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f872 	bl	8001020 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7ff f86e 	bl	8001020 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e07c      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d068      	beq.n	800204e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d060      	beq.n	800204a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d145      	bne.n	800201c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x4b0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff f843 	bl	8001020 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff f83f 	bl	8001020 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e04f      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	019b      	lsls	r3, r3, #6
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	071b      	lsls	r3, r3, #28
 8001fe8:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCC_OscConfig+0x4b0>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f814 	bl	8001020 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f810 	bl	8001020 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e020      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44c>
 800201a:	e018      	b.n	800204e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x4b0>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7fe fffd 	bl	8001020 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fff9 	bl	8001020 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e009      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x4a8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x47a>
 8002048:	e001      	b.n	800204e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000
 8002060:	42470060 	.word	0x42470060

08002064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e056      	b.n	8002124 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe fdd7 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	ea42 0103 	orr.w	r1, r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	f003 0104 	and.w	r1, r3, #4
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_SPI_Transmit+0x22>
 800214a:	2302      	movs	r3, #2
 800214c:	e11e      	b.n	800238c <HAL_SPI_Transmit+0x260>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002156:	f7fe ff63 	bl	8001020 <HAL_GetTick>
 800215a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d002      	beq.n	8002172 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002170:	e103      	b.n	800237a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_SPI_Transmit+0x52>
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002182:	e0fa      	b.n	800237a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ca:	d107      	bne.n	80021dc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d007      	beq.n	80021fa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002202:	d14b      	bne.n	800229c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Transmit+0xe6>
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d13e      	bne.n	8002290 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002236:	e02b      	b.n	8002290 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d112      	bne.n	800226c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
 800226a:	e011      	b.n	8002290 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226c:	f7fe fed8 	bl	8001020 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d803      	bhi.n	8002284 <HAL_SPI_Transmit+0x158>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d102      	bne.n	800228a <HAL_SPI_Transmit+0x15e>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800228e:	e074      	b.n	800237a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ce      	bne.n	8002238 <HAL_SPI_Transmit+0x10c>
 800229a:	e04c      	b.n	8002336 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Transmit+0x17e>
 80022a4:	8afb      	ldrh	r3, [r7, #22]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d140      	bne.n	800232c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022d0:	e02c      	b.n	800232c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d113      	bne.n	8002308 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	86da      	strh	r2, [r3, #54]	; 0x36
 8002306:	e011      	b.n	800232c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002308:	f7fe fe8a 	bl	8001020 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d803      	bhi.n	8002320 <HAL_SPI_Transmit+0x1f4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231e:	d102      	bne.n	8002326 <HAL_SPI_Transmit+0x1fa>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	77fb      	strb	r3, [r7, #31]
          goto error;
 800232a:	e026      	b.n	800237a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1cd      	bne.n	80022d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fcc4 	bl	8002cc8 <SPI_EndRxTxTransaction>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	e000      	b.n	800237a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002378:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800238a:	7ffb      	ldrb	r3, [r7, #31]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b0:	d112      	bne.n	80023d8 <HAL_SPI_Receive+0x44>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2204      	movs	r2, #4
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8e9 	bl	80025a6 <HAL_SPI_TransmitReceive>
 80023d4:	4603      	mov	r3, r0
 80023d6:	e0e2      	b.n	800259e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_SPI_Receive+0x52>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0db      	b.n	800259e <HAL_SPI_Receive+0x20a>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ee:	f7fe fe17 	bl	8001020 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002404:	e0c2      	b.n	800258c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_Receive+0x7e>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002416:	e0b9      	b.n	800258c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2204      	movs	r2, #4
 800241c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	d107      	bne.n	8002470 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d007      	beq.n	800248e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d162      	bne.n	800255c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002496:	e02e      	b.n	80024f6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d115      	bne.n	80024d2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f103 020c 	add.w	r2, r3, #12
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024d0:	e011      	b.n	80024f6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d2:	f7fe fda5 	bl	8001020 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d803      	bhi.n	80024ea <HAL_SPI_Receive+0x156>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d102      	bne.n	80024f0 <HAL_SPI_Receive+0x15c>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024f4:	e04a      	b.n	800258c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1cb      	bne.n	8002498 <HAL_SPI_Receive+0x104>
 8002500:	e031      	b.n	8002566 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d113      	bne.n	8002538 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	b292      	uxth	r2, r2
 800251c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	1c9a      	adds	r2, r3, #2
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002536:	e011      	b.n	800255c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002538:	f7fe fd72 	bl	8001020 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d803      	bhi.n	8002550 <HAL_SPI_Receive+0x1bc>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d102      	bne.n	8002556 <HAL_SPI_Receive+0x1c2>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	75fb      	strb	r3, [r7, #23]
          goto error;
 800255a:	e017      	b.n	800258c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1cd      	bne.n	8002502 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fb46 	bl	8002bfc <SPI_EndRxTransaction>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
 8002588:	e000      	b.n	800258c <HAL_SPI_Receive+0x1f8>
  }

error :
 800258a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800259c:	7dfb      	ldrb	r3, [r7, #23]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08c      	sub	sp, #48	; 0x30
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x26>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e18a      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x33c>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025d4:	f7fe fd24 	bl	8001020 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d00f      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x70>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025fc:	d107      	bne.n	800260e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_SPI_TransmitReceive+0x68>
 8002606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800260a:	2b04      	cmp	r3, #4
 800260c:	d003      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002614:	e15b      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_SPI_TransmitReceive+0x82>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_TransmitReceive+0x82>
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800262e:	e14e      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b04      	cmp	r3, #4
 800263a:	d003      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2205      	movs	r2, #5
 8002640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d007      	beq.n	8002698 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a0:	d178      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x10a>
 80026aa:	8b7b      	ldrh	r3, [r7, #26]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d166      	bne.n	800277e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d4:	e053      	b.n	800277e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11b      	bne.n	800271c <HAL_SPI_TransmitReceive+0x176>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_SPI_TransmitReceive+0x176>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d113      	bne.n	800271c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	1c9a      	adds	r2, r3, #2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d119      	bne.n	800275e <HAL_SPI_TransmitReceive+0x1b8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d014      	beq.n	800275e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	b292      	uxth	r2, r2
 8002740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800275a:	2301      	movs	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800275e:	f7fe fc5f 	bl	8001020 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800276a:	429a      	cmp	r2, r3
 800276c:	d807      	bhi.n	800277e <HAL_SPI_TransmitReceive+0x1d8>
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d003      	beq.n	800277e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800277c:	e0a7      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1a6      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x130>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1a1      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x130>
 8002792:	e07c      	b.n	800288e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x1fc>
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d16b      	bne.n	800287a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c8:	e057      	b.n	800287a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d11c      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x26c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x26c>
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d114      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d119      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x2ae>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002850:	2301      	movs	r3, #1
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002854:	f7fe fbe4 	bl	8001020 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002860:	429a      	cmp	r2, r3
 8002862:	d803      	bhi.n	800286c <HAL_SPI_TransmitReceive+0x2c6>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d102      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x2cc>
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002878:	e029      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1a2      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x224>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d19d      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fa18 	bl	8002cc8 <SPI_EndRxTxTransaction>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028aa:	e010      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	e000      	b.n	80028ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3730      	adds	r7, #48	; 0x30
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10f      	bne.n	8002930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
    return;
 800292e:	e0d8      	b.n	8002ae2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_SPI_IRQHandler+0x66>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	09db      	lsrs	r3, r3, #7
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
    return;
 8002950:	e0c7      	b.n	8002ae2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_SPI_IRQHandler+0x8c>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80b5 	beq.w	8002ae2 <HAL_SPI_IRQHandler+0x1f6>
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80ae 	beq.w	8002ae2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d023      	beq.n	80029da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b03      	cmp	r3, #3
 800299c:	d011      	beq.n	80029c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 0204 	orr.w	r2, r3, #4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	e00b      	b.n	80029da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
        return;
 80029d8:	e083      	b.n	8002ae2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d014      	beq.n	8002a10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f043 0208 	orr.w	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d050      	beq.n	8002ae0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_SPI_IRQHandler+0x17e>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d034      	beq.n	8002ad4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0203 	bic.w	r2, r2, #3
 8002a78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d011      	beq.n	8002aa6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_SPI_IRQHandler+0x1fc>)
 8002a88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fc05 	bl	800129e <HAL_DMA_Abort_IT>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_SPI_IRQHandler+0x1fc>)
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fbef 	bl	800129e <HAL_DMA_Abort_IT>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ad2:	e003      	b.n	8002adc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f809 	bl	8002aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ada:	e000      	b.n	8002ade <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002adc:	bf00      	nop
    return;
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
  }
}
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	08002b01 	.word	0x08002b01

08002aec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ffe6 	bl	8002aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b38:	e04c      	b.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d048      	beq.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b42:	f7fe fa6d 	bl	8001020 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d902      	bls.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13d      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b70:	d111      	bne.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7a:	d004      	beq.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d107      	bne.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	d10f      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e00f      	b.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d1a3      	bne.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c10:	d111      	bne.n	8002c36 <SPI_EndRxTransaction+0x3a>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1a:	d004      	beq.n	8002c26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d107      	bne.n	8002c36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3e:	d12a      	bne.n	8002c96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d012      	beq.n	8002c70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff ff67 	bl	8002b28 <SPI_WaitFlagStateUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02d      	beq.n	8002cbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e026      	b.n	8002cbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2101      	movs	r1, #1
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff54 	bl	8002b28 <SPI_WaitFlagStateUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01a      	beq.n	8002cbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e013      	b.n	8002cbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff ff41 	bl	8002b28 <SPI_WaitFlagStateUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e000      	b.n	8002cbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <SPI_EndRxTxTransaction+0x7c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <SPI_EndRxTxTransaction+0x80>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0d5b      	lsrs	r3, r3, #21
 8002ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf2:	d112      	bne.n	8002d1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff12 	bl	8002b28 <SPI_WaitFlagStateUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d0f2      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x52>
 8002d34:	e000      	b.n	8002d38 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d36:	bf00      	nop
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000
 8002d48:	165e9f81 	.word	0x165e9f81

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e03f      	b.n	8002dde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd ffe6 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	; 0x24
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fb97 	bl	80034c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af02      	add	r7, sp, #8
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	f040 8083 	bne.w	8002f0e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_UART_Transmit+0x2e>
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07b      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Transmit+0x40>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e074      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe f8f0 	bl	8001020 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e56:	e042      	b.n	8002ede <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	d122      	bne.n	8002eb6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f9b6 	bl	80031ec <UART_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e042      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e9c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	e017      	b.n	8002ede <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	e013      	b.n	8002ede <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f993 	bl	80031ec <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e01f      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	60ba      	str	r2, [r7, #8]
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1b7      	bne.n	8002e58 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2140      	movs	r1, #64	; 0x40
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f97a 	bl	80031ec <UART_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e006      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d140      	bne.n	8002fb4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_UART_Receive_IT+0x26>
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e039      	b.n	8002fb6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Receive_IT+0x38>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e032      	b.n	8002fb6 <HAL_UART_Receive_IT+0x9e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	88fa      	ldrh	r2, [r7, #6]
 8002f62:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2222      	movs	r2, #34	; 0x22
 8002f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_UART_IRQHandler+0x52>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f9d6 	bl	80033c0 <UART_Receive_IT>
      return;
 8003014:	e0d1      	b.n	80031ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80b0 	beq.w	800317e <HAL_UART_IRQHandler+0x1ba>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_UART_IRQHandler+0x70>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80a5 	beq.w	800317e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_UART_IRQHandler+0x90>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_UART_IRQHandler+0xb0>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	f043 0202 	orr.w	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_UART_IRQHandler+0xd0>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00f      	beq.n	80030be <HAL_UART_IRQHandler+0xfa>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_UART_IRQHandler+0xee>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d078      	beq.n	80031b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_UART_IRQHandler+0x11c>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f970 	bl	80033c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_UART_IRQHandler+0x144>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d031      	beq.n	800316c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8b9 	bl	8003280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d123      	bne.n	8003164 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_UART_IRQHandler+0x1fc>)
 800313a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe f8ac 	bl	800129e <HAL_DMA_Abort_IT>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003156:	4610      	mov	r0, r2
 8003158:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315a:	e00e      	b.n	800317a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f83b 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003162:	e00a      	b.n	800317a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f837 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316a:	e006      	b.n	800317a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f833 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003178:	e01e      	b.n	80031b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317a:	bf00      	nop
    return;
 800317c:	e01c      	b.n	80031b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_UART_IRQHandler+0x1d6>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8a6 	bl	80032e4 <UART_Transmit_IT>
    return;
 8003198:	e00f      	b.n	80031ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_UART_IRQHandler+0x1f6>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8ee 	bl	8003390 <UART_EndTransmit_IT>
    return;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80031b8:	bf00      	nop
  }
}
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	080032bd 	.word	0x080032bd

080031c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fc:	e02c      	b.n	8003258 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d028      	beq.n	8003258 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <UART_WaitOnFlagUntilTimeout+0x30>
 800320c:	f7fd ff08 	bl	8001020 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	429a      	cmp	r2, r3
 800321a:	d21d      	bcs.n	8003258 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800322a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e00f      	b.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	429a      	cmp	r2, r3
 8003274:	d0c3      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003296:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff7e 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b21      	cmp	r3, #33	; 0x21
 80032f6:	d144      	bne.n	8003382 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d11a      	bne.n	8003338 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003316:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]
 800332a:	e00e      	b.n	800334a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	621a      	str	r2, [r3, #32]
 8003336:	e008      	b.n	800334a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6211      	str	r1, [r2, #32]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29b      	uxth	r3, r3
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4619      	mov	r1, r3
 8003358:	84d1      	strh	r1, [r2, #38]	; 0x26
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800336c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800337c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff07 	bl	80031c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b22      	cmp	r3, #34	; 0x22
 80033d2:	d171      	bne.n	80034b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033dc:	d123      	bne.n	8003426 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
 8003408:	e029      	b.n	800345e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	e01b      	b.n	800345e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6858      	ldr	r0, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6291      	str	r1, [r2, #40]	; 0x28
 800343e:	b2c2      	uxtb	r2, r0
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e00c      	b.n	800345e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	1c58      	adds	r0, r3, #1
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	6288      	str	r0, [r1, #40]	; 0x28
 8003456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29b      	uxth	r3, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800346e:	2b00      	cmp	r3, #0
 8003470:	d120      	bne.n	80034b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0220 	bic.w	r2, r2, #32
 8003480:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd f8a0 	bl	80005f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e002      	b.n	80034ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003506:	f023 030c 	bic.w	r3, r3, #12
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	430b      	orrs	r3, r1
 8003512:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003532:	f040 818b 	bne.w	800384c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4ac1      	ldr	r2, [pc, #772]	; (8003840 <UART_SetConfig+0x37c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d005      	beq.n	800354c <UART_SetConfig+0x88>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4abf      	ldr	r2, [pc, #764]	; (8003844 <UART_SetConfig+0x380>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f040 80bd 	bne.w	80036c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800354c:	f7fe f97c 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8003550:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	461d      	mov	r5, r3
 8003556:	f04f 0600 	mov.w	r6, #0
 800355a:	46a8      	mov	r8, r5
 800355c:	46b1      	mov	r9, r6
 800355e:	eb18 0308 	adds.w	r3, r8, r8
 8003562:	eb49 0409 	adc.w	r4, r9, r9
 8003566:	4698      	mov	r8, r3
 8003568:	46a1      	mov	r9, r4
 800356a:	eb18 0805 	adds.w	r8, r8, r5
 800356e:	eb49 0906 	adc.w	r9, r9, r6
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800357e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003582:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003586:	4688      	mov	r8, r1
 8003588:	4691      	mov	r9, r2
 800358a:	eb18 0005 	adds.w	r0, r8, r5
 800358e:	eb49 0106 	adc.w	r1, r9, r6
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	461d      	mov	r5, r3
 8003598:	f04f 0600 	mov.w	r6, #0
 800359c:	196b      	adds	r3, r5, r5
 800359e:	eb46 0406 	adc.w	r4, r6, r6
 80035a2:	461a      	mov	r2, r3
 80035a4:	4623      	mov	r3, r4
 80035a6:	f7fc fe2d 	bl	8000204 <__aeabi_uldivmod>
 80035aa:	4603      	mov	r3, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	461a      	mov	r2, r3
 80035b0:	4ba5      	ldr	r3, [pc, #660]	; (8003848 <UART_SetConfig+0x384>)
 80035b2:	fba3 2302 	umull	r2, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	461d      	mov	r5, r3
 80035c0:	f04f 0600 	mov.w	r6, #0
 80035c4:	46a9      	mov	r9, r5
 80035c6:	46b2      	mov	sl, r6
 80035c8:	eb19 0309 	adds.w	r3, r9, r9
 80035cc:	eb4a 040a 	adc.w	r4, sl, sl
 80035d0:	4699      	mov	r9, r3
 80035d2:	46a2      	mov	sl, r4
 80035d4:	eb19 0905 	adds.w	r9, r9, r5
 80035d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035f0:	4689      	mov	r9, r1
 80035f2:	4692      	mov	sl, r2
 80035f4:	eb19 0005 	adds.w	r0, r9, r5
 80035f8:	eb4a 0106 	adc.w	r1, sl, r6
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	461d      	mov	r5, r3
 8003602:	f04f 0600 	mov.w	r6, #0
 8003606:	196b      	adds	r3, r5, r5
 8003608:	eb46 0406 	adc.w	r4, r6, r6
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	f7fc fdf8 	bl	8000204 <__aeabi_uldivmod>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	461a      	mov	r2, r3
 800361a:	4b8b      	ldr	r3, [pc, #556]	; (8003848 <UART_SetConfig+0x384>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a86      	ldr	r2, [pc, #536]	; (8003848 <UART_SetConfig+0x384>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800363c:	4498      	add	r8, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	461d      	mov	r5, r3
 8003642:	f04f 0600 	mov.w	r6, #0
 8003646:	46a9      	mov	r9, r5
 8003648:	46b2      	mov	sl, r6
 800364a:	eb19 0309 	adds.w	r3, r9, r9
 800364e:	eb4a 040a 	adc.w	r4, sl, sl
 8003652:	4699      	mov	r9, r3
 8003654:	46a2      	mov	sl, r4
 8003656:	eb19 0905 	adds.w	r9, r9, r5
 800365a:	eb4a 0a06 	adc.w	sl, sl, r6
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800366a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800366e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003672:	4689      	mov	r9, r1
 8003674:	4692      	mov	sl, r2
 8003676:	eb19 0005 	adds.w	r0, r9, r5
 800367a:	eb4a 0106 	adc.w	r1, sl, r6
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	461d      	mov	r5, r3
 8003684:	f04f 0600 	mov.w	r6, #0
 8003688:	196b      	adds	r3, r5, r5
 800368a:	eb46 0406 	adc.w	r4, r6, r6
 800368e:	461a      	mov	r2, r3
 8003690:	4623      	mov	r3, r4
 8003692:	f7fc fdb7 	bl	8000204 <__aeabi_uldivmod>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	461a      	mov	r2, r3
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <UART_SetConfig+0x384>)
 800369e:	fba3 1302 	umull	r1, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2164      	movs	r1, #100	; 0x64
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	3332      	adds	r3, #50	; 0x32
 80036b0:	4a65      	ldr	r2, [pc, #404]	; (8003848 <UART_SetConfig+0x384>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 0207 	and.w	r2, r3, #7
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4442      	add	r2, r8
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e26f      	b.n	8003ba6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036c6:	f7fe f8ab 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80036ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	461d      	mov	r5, r3
 80036d0:	f04f 0600 	mov.w	r6, #0
 80036d4:	46a8      	mov	r8, r5
 80036d6:	46b1      	mov	r9, r6
 80036d8:	eb18 0308 	adds.w	r3, r8, r8
 80036dc:	eb49 0409 	adc.w	r4, r9, r9
 80036e0:	4698      	mov	r8, r3
 80036e2:	46a1      	mov	r9, r4
 80036e4:	eb18 0805 	adds.w	r8, r8, r5
 80036e8:	eb49 0906 	adc.w	r9, r9, r6
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003700:	4688      	mov	r8, r1
 8003702:	4691      	mov	r9, r2
 8003704:	eb18 0005 	adds.w	r0, r8, r5
 8003708:	eb49 0106 	adc.w	r1, r9, r6
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	461d      	mov	r5, r3
 8003712:	f04f 0600 	mov.w	r6, #0
 8003716:	196b      	adds	r3, r5, r5
 8003718:	eb46 0406 	adc.w	r4, r6, r6
 800371c:	461a      	mov	r2, r3
 800371e:	4623      	mov	r3, r4
 8003720:	f7fc fd70 	bl	8000204 <__aeabi_uldivmod>
 8003724:	4603      	mov	r3, r0
 8003726:	460c      	mov	r4, r1
 8003728:	461a      	mov	r2, r3
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <UART_SetConfig+0x384>)
 800372c:	fba3 2302 	umull	r2, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	461d      	mov	r5, r3
 800373a:	f04f 0600 	mov.w	r6, #0
 800373e:	46a9      	mov	r9, r5
 8003740:	46b2      	mov	sl, r6
 8003742:	eb19 0309 	adds.w	r3, r9, r9
 8003746:	eb4a 040a 	adc.w	r4, sl, sl
 800374a:	4699      	mov	r9, r3
 800374c:	46a2      	mov	sl, r4
 800374e:	eb19 0905 	adds.w	r9, r9, r5
 8003752:	eb4a 0a06 	adc.w	sl, sl, r6
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800376a:	4689      	mov	r9, r1
 800376c:	4692      	mov	sl, r2
 800376e:	eb19 0005 	adds.w	r0, r9, r5
 8003772:	eb4a 0106 	adc.w	r1, sl, r6
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	461d      	mov	r5, r3
 800377c:	f04f 0600 	mov.w	r6, #0
 8003780:	196b      	adds	r3, r5, r5
 8003782:	eb46 0406 	adc.w	r4, r6, r6
 8003786:	461a      	mov	r2, r3
 8003788:	4623      	mov	r3, r4
 800378a:	f7fc fd3b 	bl	8000204 <__aeabi_uldivmod>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	461a      	mov	r2, r3
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <UART_SetConfig+0x384>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2164      	movs	r1, #100	; 0x64
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a27      	ldr	r2, [pc, #156]	; (8003848 <UART_SetConfig+0x384>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b6:	4498      	add	r8, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	461d      	mov	r5, r3
 80037bc:	f04f 0600 	mov.w	r6, #0
 80037c0:	46a9      	mov	r9, r5
 80037c2:	46b2      	mov	sl, r6
 80037c4:	eb19 0309 	adds.w	r3, r9, r9
 80037c8:	eb4a 040a 	adc.w	r4, sl, sl
 80037cc:	4699      	mov	r9, r3
 80037ce:	46a2      	mov	sl, r4
 80037d0:	eb19 0905 	adds.w	r9, r9, r5
 80037d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ec:	4689      	mov	r9, r1
 80037ee:	4692      	mov	sl, r2
 80037f0:	eb19 0005 	adds.w	r0, r9, r5
 80037f4:	eb4a 0106 	adc.w	r1, sl, r6
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	461d      	mov	r5, r3
 80037fe:	f04f 0600 	mov.w	r6, #0
 8003802:	196b      	adds	r3, r5, r5
 8003804:	eb46 0406 	adc.w	r4, r6, r6
 8003808:	461a      	mov	r2, r3
 800380a:	4623      	mov	r3, r4
 800380c:	f7fc fcfa 	bl	8000204 <__aeabi_uldivmod>
 8003810:	4603      	mov	r3, r0
 8003812:	460c      	mov	r4, r1
 8003814:	461a      	mov	r2, r3
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <UART_SetConfig+0x384>)
 8003818:	fba3 1302 	umull	r1, r3, r3, r2
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	2164      	movs	r1, #100	; 0x64
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	3332      	adds	r3, #50	; 0x32
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <UART_SetConfig+0x384>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	f003 0207 	and.w	r2, r3, #7
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4442      	add	r2, r8
 800383c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800383e:	e1b2      	b.n	8003ba6 <UART_SetConfig+0x6e2>
 8003840:	40011000 	.word	0x40011000
 8003844:	40011400 	.word	0x40011400
 8003848:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4ad7      	ldr	r2, [pc, #860]	; (8003bb0 <UART_SetConfig+0x6ec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d005      	beq.n	8003862 <UART_SetConfig+0x39e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4ad6      	ldr	r2, [pc, #856]	; (8003bb4 <UART_SetConfig+0x6f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	f040 80d1 	bne.w	8003a04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003862:	f7fd fff1 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8003866:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	469a      	mov	sl, r3
 800386c:	f04f 0b00 	mov.w	fp, #0
 8003870:	46d0      	mov	r8, sl
 8003872:	46d9      	mov	r9, fp
 8003874:	eb18 0308 	adds.w	r3, r8, r8
 8003878:	eb49 0409 	adc.w	r4, r9, r9
 800387c:	4698      	mov	r8, r3
 800387e:	46a1      	mov	r9, r4
 8003880:	eb18 080a 	adds.w	r8, r8, sl
 8003884:	eb49 090b 	adc.w	r9, r9, fp
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003894:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003898:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800389c:	4688      	mov	r8, r1
 800389e:	4691      	mov	r9, r2
 80038a0:	eb1a 0508 	adds.w	r5, sl, r8
 80038a4:	eb4b 0609 	adc.w	r6, fp, r9
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	0094      	lsls	r4, r2, #2
 80038bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038c0:	008b      	lsls	r3, r1, #2
 80038c2:	461a      	mov	r2, r3
 80038c4:	4623      	mov	r3, r4
 80038c6:	4628      	mov	r0, r5
 80038c8:	4631      	mov	r1, r6
 80038ca:	f7fc fc9b 	bl	8000204 <__aeabi_uldivmod>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	461a      	mov	r2, r3
 80038d4:	4bb8      	ldr	r3, [pc, #736]	; (8003bb8 <UART_SetConfig+0x6f4>)
 80038d6:	fba3 2302 	umull	r2, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	469b      	mov	fp, r3
 80038e4:	f04f 0c00 	mov.w	ip, #0
 80038e8:	46d9      	mov	r9, fp
 80038ea:	46e2      	mov	sl, ip
 80038ec:	eb19 0309 	adds.w	r3, r9, r9
 80038f0:	eb4a 040a 	adc.w	r4, sl, sl
 80038f4:	4699      	mov	r9, r3
 80038f6:	46a2      	mov	sl, r4
 80038f8:	eb19 090b 	adds.w	r9, r9, fp
 80038fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800390c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003910:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003914:	4689      	mov	r9, r1
 8003916:	4692      	mov	sl, r2
 8003918:	eb1b 0509 	adds.w	r5, fp, r9
 800391c:	eb4c 060a 	adc.w	r6, ip, sl
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	f04f 0400 	mov.w	r4, #0
 8003932:	0094      	lsls	r4, r2, #2
 8003934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003938:	008b      	lsls	r3, r1, #2
 800393a:	461a      	mov	r2, r3
 800393c:	4623      	mov	r3, r4
 800393e:	4628      	mov	r0, r5
 8003940:	4631      	mov	r1, r6
 8003942:	f7fc fc5f 	bl	8000204 <__aeabi_uldivmod>
 8003946:	4603      	mov	r3, r0
 8003948:	460c      	mov	r4, r1
 800394a:	461a      	mov	r2, r3
 800394c:	4b9a      	ldr	r3, [pc, #616]	; (8003bb8 <UART_SetConfig+0x6f4>)
 800394e:	fba3 1302 	umull	r1, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2164      	movs	r1, #100	; 0x64
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a95      	ldr	r2, [pc, #596]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	4498      	add	r8, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	469b      	mov	fp, r3
 8003972:	f04f 0c00 	mov.w	ip, #0
 8003976:	46d9      	mov	r9, fp
 8003978:	46e2      	mov	sl, ip
 800397a:	eb19 0309 	adds.w	r3, r9, r9
 800397e:	eb4a 040a 	adc.w	r4, sl, sl
 8003982:	4699      	mov	r9, r3
 8003984:	46a2      	mov	sl, r4
 8003986:	eb19 090b 	adds.w	r9, r9, fp
 800398a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800399a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a2:	4689      	mov	r9, r1
 80039a4:	4692      	mov	sl, r2
 80039a6:	eb1b 0509 	adds.w	r5, fp, r9
 80039aa:	eb4c 060a 	adc.w	r6, ip, sl
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4619      	mov	r1, r3
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f04f 0400 	mov.w	r4, #0
 80039c0:	0094      	lsls	r4, r2, #2
 80039c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4623      	mov	r3, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	4631      	mov	r1, r6
 80039d0:	f7fc fc18 	bl	8000204 <__aeabi_uldivmod>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	461a      	mov	r2, r3
 80039da:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <UART_SetConfig+0x6f4>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a72      	ldr	r2, [pc, #456]	; (8003bb8 <UART_SetConfig+0x6f4>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4442      	add	r2, r8
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	e0d0      	b.n	8003ba6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fd ff0c 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8003a08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	469a      	mov	sl, r3
 8003a0e:	f04f 0b00 	mov.w	fp, #0
 8003a12:	46d0      	mov	r8, sl
 8003a14:	46d9      	mov	r9, fp
 8003a16:	eb18 0308 	adds.w	r3, r8, r8
 8003a1a:	eb49 0409 	adc.w	r4, r9, r9
 8003a1e:	4698      	mov	r8, r3
 8003a20:	46a1      	mov	r9, r4
 8003a22:	eb18 080a 	adds.w	r8, r8, sl
 8003a26:	eb49 090b 	adc.w	r9, r9, fp
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a3e:	4688      	mov	r8, r1
 8003a40:	4691      	mov	r9, r2
 8003a42:	eb1a 0508 	adds.w	r5, sl, r8
 8003a46:	eb4b 0609 	adc.w	r6, fp, r9
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	f04f 0400 	mov.w	r4, #0
 8003a5c:	0094      	lsls	r4, r2, #2
 8003a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a62:	008b      	lsls	r3, r1, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	f7fc fbca 	bl	8000204 <__aeabi_uldivmod>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003a78:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	469b      	mov	fp, r3
 8003a86:	f04f 0c00 	mov.w	ip, #0
 8003a8a:	46d9      	mov	r9, fp
 8003a8c:	46e2      	mov	sl, ip
 8003a8e:	eb19 0309 	adds.w	r3, r9, r9
 8003a92:	eb4a 040a 	adc.w	r4, sl, sl
 8003a96:	4699      	mov	r9, r3
 8003a98:	46a2      	mov	sl, r4
 8003a9a:	eb19 090b 	adds.w	r9, r9, fp
 8003a9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ab6:	4689      	mov	r9, r1
 8003ab8:	4692      	mov	sl, r2
 8003aba:	eb1b 0509 	adds.w	r5, fp, r9
 8003abe:	eb4c 060a 	adc.w	r6, ip, sl
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	0094      	lsls	r4, r2, #2
 8003ad6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ada:	008b      	lsls	r3, r1, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	f7fc fb8e 	bl	8000204 <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003af0:	fba3 1302 	umull	r1, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	2164      	movs	r1, #100	; 0x64
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	3332      	adds	r3, #50	; 0x32
 8003b02:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b0e:	4498      	add	r8, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	469b      	mov	fp, r3
 8003b14:	f04f 0c00 	mov.w	ip, #0
 8003b18:	46d9      	mov	r9, fp
 8003b1a:	46e2      	mov	sl, ip
 8003b1c:	eb19 0309 	adds.w	r3, r9, r9
 8003b20:	eb4a 040a 	adc.w	r4, sl, sl
 8003b24:	4699      	mov	r9, r3
 8003b26:	46a2      	mov	sl, r4
 8003b28:	eb19 090b 	adds.w	r9, r9, fp
 8003b2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b44:	4689      	mov	r9, r1
 8003b46:	4692      	mov	sl, r2
 8003b48:	eb1b 0509 	adds.w	r5, fp, r9
 8003b4c:	eb4c 060a 	adc.w	r6, ip, sl
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	0094      	lsls	r4, r2, #2
 8003b64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b68:	008b      	lsls	r3, r1, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	4628      	mov	r0, r5
 8003b70:	4631      	mov	r1, r6
 8003b72:	f7fc fb47 	bl	8000204 <__aeabi_uldivmod>
 8003b76:	4603      	mov	r3, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2164      	movs	r1, #100	; 0x64
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	3332      	adds	r3, #50	; 0x32
 8003b90:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <UART_SetConfig+0x6f4>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4442      	add	r2, r8
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	e7ff      	b.n	8003ba6 <UART_SetConfig+0x6e2>
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb0:	40011000 	.word	0x40011000
 8003bb4:	40011400 	.word	0x40011400
 8003bb8:	51eb851f 	.word	0x51eb851f

08003bbc <atoi>:
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f000 b914 	b.w	8003dec <strtol>

08003bc4 <__errno>:
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <__errno+0x8>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4e0d      	ldr	r6, [pc, #52]	; (8003c08 <__libc_init_array+0x38>)
 8003bd4:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd6:	1ba4      	subs	r4, r4, r6
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	2500      	movs	r5, #0
 8003bdc:	42a5      	cmp	r5, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	4e0b      	ldr	r6, [pc, #44]	; (8003c10 <__libc_init_array+0x40>)
 8003be2:	4c0c      	ldr	r4, [pc, #48]	; (8003c14 <__libc_init_array+0x44>)
 8003be4:	f000 f9b0 	bl	8003f48 <_init>
 8003be8:	1ba4      	subs	r4, r4, r6
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	2500      	movs	r5, #0
 8003bee:	42a5      	cmp	r5, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bf8:	4798      	blx	r3
 8003bfa:	3501      	adds	r5, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c02:	4798      	blx	r3
 8003c04:	3501      	adds	r5, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	0800409c 	.word	0x0800409c
 8003c0c:	0800409c 	.word	0x0800409c
 8003c10:	0800409c 	.word	0x0800409c
 8003c14:	080040a0 	.word	0x080040a0

08003c18 <memset>:
 8003c18:	4402      	add	r2, r0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <strcspn>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c32:	b14d      	cbz	r5, 8003c48 <strcspn+0x20>
 8003c34:	1e4c      	subs	r4, r1, #1
 8003c36:	e001      	b.n	8003c3c <strcspn+0x14>
 8003c38:	42ae      	cmp	r6, r5
 8003c3a:	d005      	beq.n	8003c48 <strcspn+0x20>
 8003c3c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8003c40:	2e00      	cmp	r6, #0
 8003c42:	d1f9      	bne.n	8003c38 <strcspn+0x10>
 8003c44:	4613      	mov	r3, r2
 8003c46:	e7f1      	b.n	8003c2c <strcspn+0x4>
 8003c48:	1a18      	subs	r0, r3, r0
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}

08003c4c <strtok>:
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <strtok+0x50>)
 8003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	681d      	ldr	r5, [r3, #0]
 8003c54:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003c56:	4606      	mov	r6, r0
 8003c58:	460f      	mov	r7, r1
 8003c5a:	b9b4      	cbnz	r4, 8003c8a <strtok+0x3e>
 8003c5c:	2050      	movs	r0, #80	; 0x50
 8003c5e:	f000 f8df 	bl	8003e20 <malloc>
 8003c62:	65a8      	str	r0, [r5, #88]	; 0x58
 8003c64:	e9c0 4400 	strd	r4, r4, [r0]
 8003c68:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003c6c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003c70:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003c74:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003c78:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003c7c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003c80:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003c84:	6184      	str	r4, [r0, #24]
 8003c86:	7704      	strb	r4, [r0, #28]
 8003c88:	6244      	str	r4, [r0, #36]	; 0x24
 8003c8a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	4630      	mov	r0, r6
 8003c90:	2301      	movs	r3, #1
 8003c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	f000 b803 	b.w	8003ca0 <__strtok_r>
 8003c9a:	bf00      	nop
 8003c9c:	2000000c 	.word	0x2000000c

08003ca0 <__strtok_r>:
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b918      	cbnz	r0, 8003cac <__strtok_r+0xc>
 8003ca4:	6810      	ldr	r0, [r2, #0]
 8003ca6:	b908      	cbnz	r0, 8003cac <__strtok_r+0xc>
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003caa:	4620      	mov	r0, r4
 8003cac:	4604      	mov	r4, r0
 8003cae:	460f      	mov	r7, r1
 8003cb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003cb4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003cb8:	b91e      	cbnz	r6, 8003cc2 <__strtok_r+0x22>
 8003cba:	b96d      	cbnz	r5, 8003cd8 <__strtok_r+0x38>
 8003cbc:	6015      	str	r5, [r2, #0]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	e7f2      	b.n	8003ca8 <__strtok_r+0x8>
 8003cc2:	42b5      	cmp	r5, r6
 8003cc4:	d1f6      	bne.n	8003cb4 <__strtok_r+0x14>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ef      	bne.n	8003caa <__strtok_r+0xa>
 8003cca:	6014      	str	r4, [r2, #0]
 8003ccc:	7003      	strb	r3, [r0, #0]
 8003cce:	e7eb      	b.n	8003ca8 <__strtok_r+0x8>
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	e00d      	b.n	8003cf0 <__strtok_r+0x50>
 8003cd4:	b926      	cbnz	r6, 8003ce0 <__strtok_r+0x40>
 8003cd6:	461c      	mov	r4, r3
 8003cd8:	4623      	mov	r3, r4
 8003cda:	460f      	mov	r7, r1
 8003cdc:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003ce0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ce4:	42b5      	cmp	r5, r6
 8003ce6:	d1f5      	bne.n	8003cd4 <__strtok_r+0x34>
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	d0f1      	beq.n	8003cd0 <__strtok_r+0x30>
 8003cec:	2100      	movs	r1, #0
 8003cee:	7021      	strb	r1, [r4, #0]
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e7d9      	b.n	8003ca8 <__strtok_r+0x8>

08003cf4 <_strtol_l.isra.0>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	4689      	mov	r9, r1
 8003cfc:	4692      	mov	sl, r2
 8003cfe:	461e      	mov	r6, r3
 8003d00:	460f      	mov	r7, r1
 8003d02:	463d      	mov	r5, r7
 8003d04:	9808      	ldr	r0, [sp, #32]
 8003d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d0a:	f000 f885 	bl	8003e18 <__locale_ctype_ptr_l>
 8003d0e:	4420      	add	r0, r4
 8003d10:	7843      	ldrb	r3, [r0, #1]
 8003d12:	f013 0308 	ands.w	r3, r3, #8
 8003d16:	d132      	bne.n	8003d7e <_strtol_l.isra.0+0x8a>
 8003d18:	2c2d      	cmp	r4, #45	; 0x2d
 8003d1a:	d132      	bne.n	8003d82 <_strtol_l.isra.0+0x8e>
 8003d1c:	787c      	ldrb	r4, [r7, #1]
 8003d1e:	1cbd      	adds	r5, r7, #2
 8003d20:	2201      	movs	r2, #1
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d05d      	beq.n	8003de2 <_strtol_l.isra.0+0xee>
 8003d26:	2e10      	cmp	r6, #16
 8003d28:	d109      	bne.n	8003d3e <_strtol_l.isra.0+0x4a>
 8003d2a:	2c30      	cmp	r4, #48	; 0x30
 8003d2c:	d107      	bne.n	8003d3e <_strtol_l.isra.0+0x4a>
 8003d2e:	782b      	ldrb	r3, [r5, #0]
 8003d30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003d34:	2b58      	cmp	r3, #88	; 0x58
 8003d36:	d14f      	bne.n	8003dd8 <_strtol_l.isra.0+0xe4>
 8003d38:	786c      	ldrb	r4, [r5, #1]
 8003d3a:	2610      	movs	r6, #16
 8003d3c:	3502      	adds	r5, #2
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	bf14      	ite	ne
 8003d42:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003d46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003d4a:	2700      	movs	r7, #0
 8003d4c:	fbb1 fcf6 	udiv	ip, r1, r6
 8003d50:	4638      	mov	r0, r7
 8003d52:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003d56:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	d817      	bhi.n	8003d8e <_strtol_l.isra.0+0x9a>
 8003d5e:	461c      	mov	r4, r3
 8003d60:	42a6      	cmp	r6, r4
 8003d62:	dd23      	ble.n	8003dac <_strtol_l.isra.0+0xb8>
 8003d64:	1c7b      	adds	r3, r7, #1
 8003d66:	d007      	beq.n	8003d78 <_strtol_l.isra.0+0x84>
 8003d68:	4584      	cmp	ip, r0
 8003d6a:	d31c      	bcc.n	8003da6 <_strtol_l.isra.0+0xb2>
 8003d6c:	d101      	bne.n	8003d72 <_strtol_l.isra.0+0x7e>
 8003d6e:	45a6      	cmp	lr, r4
 8003d70:	db19      	blt.n	8003da6 <_strtol_l.isra.0+0xb2>
 8003d72:	fb00 4006 	mla	r0, r0, r6, r4
 8003d76:	2701      	movs	r7, #1
 8003d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d7c:	e7eb      	b.n	8003d56 <_strtol_l.isra.0+0x62>
 8003d7e:	462f      	mov	r7, r5
 8003d80:	e7bf      	b.n	8003d02 <_strtol_l.isra.0+0xe>
 8003d82:	2c2b      	cmp	r4, #43	; 0x2b
 8003d84:	bf04      	itt	eq
 8003d86:	1cbd      	addeq	r5, r7, #2
 8003d88:	787c      	ldrbeq	r4, [r7, #1]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	e7c9      	b.n	8003d22 <_strtol_l.isra.0+0x2e>
 8003d8e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003d92:	2b19      	cmp	r3, #25
 8003d94:	d801      	bhi.n	8003d9a <_strtol_l.isra.0+0xa6>
 8003d96:	3c37      	subs	r4, #55	; 0x37
 8003d98:	e7e2      	b.n	8003d60 <_strtol_l.isra.0+0x6c>
 8003d9a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003d9e:	2b19      	cmp	r3, #25
 8003da0:	d804      	bhi.n	8003dac <_strtol_l.isra.0+0xb8>
 8003da2:	3c57      	subs	r4, #87	; 0x57
 8003da4:	e7dc      	b.n	8003d60 <_strtol_l.isra.0+0x6c>
 8003da6:	f04f 37ff 	mov.w	r7, #4294967295
 8003daa:	e7e5      	b.n	8003d78 <_strtol_l.isra.0+0x84>
 8003dac:	1c7b      	adds	r3, r7, #1
 8003dae:	d108      	bne.n	8003dc2 <_strtol_l.isra.0+0xce>
 8003db0:	2322      	movs	r3, #34	; 0x22
 8003db2:	f8c8 3000 	str.w	r3, [r8]
 8003db6:	4608      	mov	r0, r1
 8003db8:	f1ba 0f00 	cmp.w	sl, #0
 8003dbc:	d107      	bne.n	8003dce <_strtol_l.isra.0+0xda>
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc2:	b102      	cbz	r2, 8003dc6 <_strtol_l.isra.0+0xd2>
 8003dc4:	4240      	negs	r0, r0
 8003dc6:	f1ba 0f00 	cmp.w	sl, #0
 8003dca:	d0f8      	beq.n	8003dbe <_strtol_l.isra.0+0xca>
 8003dcc:	b10f      	cbz	r7, 8003dd2 <_strtol_l.isra.0+0xde>
 8003dce:	f105 39ff 	add.w	r9, r5, #4294967295
 8003dd2:	f8ca 9000 	str.w	r9, [sl]
 8003dd6:	e7f2      	b.n	8003dbe <_strtol_l.isra.0+0xca>
 8003dd8:	2430      	movs	r4, #48	; 0x30
 8003dda:	2e00      	cmp	r6, #0
 8003ddc:	d1af      	bne.n	8003d3e <_strtol_l.isra.0+0x4a>
 8003dde:	2608      	movs	r6, #8
 8003de0:	e7ad      	b.n	8003d3e <_strtol_l.isra.0+0x4a>
 8003de2:	2c30      	cmp	r4, #48	; 0x30
 8003de4:	d0a3      	beq.n	8003d2e <_strtol_l.isra.0+0x3a>
 8003de6:	260a      	movs	r6, #10
 8003de8:	e7a9      	b.n	8003d3e <_strtol_l.isra.0+0x4a>
	...

08003dec <strtol>:
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <strtol+0x24>)
 8003dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003df0:	681c      	ldr	r4, [r3, #0]
 8003df2:	4d08      	ldr	r5, [pc, #32]	; (8003e14 <strtol+0x28>)
 8003df4:	6a23      	ldr	r3, [r4, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf08      	it	eq
 8003dfa:	462b      	moveq	r3, r5
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	460a      	mov	r2, r1
 8003e02:	4601      	mov	r1, r0
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7ff ff75 	bl	8003cf4 <_strtol_l.isra.0>
 8003e0a:	b003      	add	sp, #12
 8003e0c:	bd30      	pop	{r4, r5, pc}
 8003e0e:	bf00      	nop
 8003e10:	2000000c 	.word	0x2000000c
 8003e14:	20000070 	.word	0x20000070

08003e18 <__locale_ctype_ptr_l>:
 8003e18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003e1c:	4770      	bx	lr
	...

08003e20 <malloc>:
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <malloc+0xc>)
 8003e22:	4601      	mov	r1, r0
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f000 b815 	b.w	8003e54 <_malloc_r>
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <__ascii_mbtowc>:
 8003e30:	b082      	sub	sp, #8
 8003e32:	b901      	cbnz	r1, 8003e36 <__ascii_mbtowc+0x6>
 8003e34:	a901      	add	r1, sp, #4
 8003e36:	b142      	cbz	r2, 8003e4a <__ascii_mbtowc+0x1a>
 8003e38:	b14b      	cbz	r3, 8003e4e <__ascii_mbtowc+0x1e>
 8003e3a:	7813      	ldrb	r3, [r2, #0]
 8003e3c:	600b      	str	r3, [r1, #0]
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	1c10      	adds	r0, r2, #0
 8003e42:	bf18      	it	ne
 8003e44:	2001      	movne	r0, #1
 8003e46:	b002      	add	sp, #8
 8003e48:	4770      	bx	lr
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	e7fb      	b.n	8003e46 <__ascii_mbtowc+0x16>
 8003e4e:	f06f 0001 	mvn.w	r0, #1
 8003e52:	e7f8      	b.n	8003e46 <__ascii_mbtowc+0x16>

08003e54 <_malloc_r>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	1ccd      	adds	r5, r1, #3
 8003e58:	f025 0503 	bic.w	r5, r5, #3
 8003e5c:	3508      	adds	r5, #8
 8003e5e:	2d0c      	cmp	r5, #12
 8003e60:	bf38      	it	cc
 8003e62:	250c      	movcc	r5, #12
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	4606      	mov	r6, r0
 8003e68:	db01      	blt.n	8003e6e <_malloc_r+0x1a>
 8003e6a:	42a9      	cmp	r1, r5
 8003e6c:	d903      	bls.n	8003e76 <_malloc_r+0x22>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	2000      	movs	r0, #0
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	f000 f864 	bl	8003f42 <__malloc_lock>
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <_malloc_r+0xac>)
 8003e7c:	6814      	ldr	r4, [r2, #0]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	b991      	cbnz	r1, 8003ea8 <_malloc_r+0x54>
 8003e82:	4c20      	ldr	r4, [pc, #128]	; (8003f04 <_malloc_r+0xb0>)
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	b91b      	cbnz	r3, 8003e90 <_malloc_r+0x3c>
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f000 f83d 	bl	8003f08 <_sbrk_r>
 8003e8e:	6020      	str	r0, [r4, #0]
 8003e90:	4629      	mov	r1, r5
 8003e92:	4630      	mov	r0, r6
 8003e94:	f000 f838 	bl	8003f08 <_sbrk_r>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d124      	bne.n	8003ee6 <_malloc_r+0x92>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f84f 	bl	8003f44 <__malloc_unlock>
 8003ea6:	e7e4      	b.n	8003e72 <_malloc_r+0x1e>
 8003ea8:	680b      	ldr	r3, [r1, #0]
 8003eaa:	1b5b      	subs	r3, r3, r5
 8003eac:	d418      	bmi.n	8003ee0 <_malloc_r+0x8c>
 8003eae:	2b0b      	cmp	r3, #11
 8003eb0:	d90f      	bls.n	8003ed2 <_malloc_r+0x7e>
 8003eb2:	600b      	str	r3, [r1, #0]
 8003eb4:	50cd      	str	r5, [r1, r3]
 8003eb6:	18cc      	adds	r4, r1, r3
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f000 f843 	bl	8003f44 <__malloc_unlock>
 8003ebe:	f104 000b 	add.w	r0, r4, #11
 8003ec2:	1d23      	adds	r3, r4, #4
 8003ec4:	f020 0007 	bic.w	r0, r0, #7
 8003ec8:	1ac3      	subs	r3, r0, r3
 8003eca:	d0d3      	beq.n	8003e74 <_malloc_r+0x20>
 8003ecc:	425a      	negs	r2, r3
 8003ece:	50e2      	str	r2, [r4, r3]
 8003ed0:	e7d0      	b.n	8003e74 <_malloc_r+0x20>
 8003ed2:	428c      	cmp	r4, r1
 8003ed4:	684b      	ldr	r3, [r1, #4]
 8003ed6:	bf16      	itet	ne
 8003ed8:	6063      	strne	r3, [r4, #4]
 8003eda:	6013      	streq	r3, [r2, #0]
 8003edc:	460c      	movne	r4, r1
 8003ede:	e7eb      	b.n	8003eb8 <_malloc_r+0x64>
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	6849      	ldr	r1, [r1, #4]
 8003ee4:	e7cc      	b.n	8003e80 <_malloc_r+0x2c>
 8003ee6:	1cc4      	adds	r4, r0, #3
 8003ee8:	f024 0403 	bic.w	r4, r4, #3
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d005      	beq.n	8003efc <_malloc_r+0xa8>
 8003ef0:	1a21      	subs	r1, r4, r0
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 f808 	bl	8003f08 <_sbrk_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d0cf      	beq.n	8003e9c <_malloc_r+0x48>
 8003efc:	6025      	str	r5, [r4, #0]
 8003efe:	e7db      	b.n	8003eb8 <_malloc_r+0x64>
 8003f00:	20000204 	.word	0x20000204
 8003f04:	20000208 	.word	0x20000208

08003f08 <_sbrk_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4c06      	ldr	r4, [pc, #24]	; (8003f24 <_sbrk_r+0x1c>)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4605      	mov	r5, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	f7fc ffa8 	bl	8000e68 <_sbrk>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_sbrk_r+0x1a>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_sbrk_r+0x1a>
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	200002b8 	.word	0x200002b8

08003f28 <__ascii_wctomb>:
 8003f28:	b149      	cbz	r1, 8003f3e <__ascii_wctomb+0x16>
 8003f2a:	2aff      	cmp	r2, #255	; 0xff
 8003f2c:	bf85      	ittet	hi
 8003f2e:	238a      	movhi	r3, #138	; 0x8a
 8003f30:	6003      	strhi	r3, [r0, #0]
 8003f32:	700a      	strbls	r2, [r1, #0]
 8003f34:	f04f 30ff 	movhi.w	r0, #4294967295
 8003f38:	bf98      	it	ls
 8003f3a:	2001      	movls	r0, #1
 8003f3c:	4770      	bx	lr
 8003f3e:	4608      	mov	r0, r1
 8003f40:	4770      	bx	lr

08003f42 <__malloc_lock>:
 8003f42:	4770      	bx	lr

08003f44 <__malloc_unlock>:
 8003f44:	4770      	bx	lr
	...

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
